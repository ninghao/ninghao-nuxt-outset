{
  "currentUser": {
    "prefix": "cu",
    "body": ["const { currentUser } = useCurrentUser();"]
  },
  "$AV": {
    "prefix": "av",
    "body": ["const { $$AV } = useNuxtApp();"]
  },
  "Vue Component": {
    "prefix": "vc",
    "body": [
      "<template>",
      "  <div class='${1:ComponentName}'>${1:ComponentName}</div>",
      "</template>",
      ""
    ]
  },
  "Arrow function": {
    "prefix": "af",
    "body": "() => {${1}}"
  },
  "script:setup": {
    "prefix": "ss",
    "body": [
      "<script setup lang=\"ts\">",
      "  ${1}",
      "</script>",
      ""
    ]
  },
  "style:postcss": {
    "prefix": "sp",
    "body": [
      "<style lang=\"postcss\" scoped>",
      "  ${1}",
      "</style>",
      ""
    ]
  },
  "useAnimation": {
    "prefix": "ua",
    "body": [
      "const { \\$gsap, root } = useAnimation(() => {",
      "${1}",
      "});"
    ]
  },
  "template": {
    "prefix": "tp",
    "body": ["<template>", "  ${1}", "</template>", ""]
  },
  "Destructuring assignment object": {
    "prefix": "dao",
    "body": ["const {${2}} = ${1};"]
  },
  "Destructuring assignment array": {
    "prefix": "daa",
    "body": ["const {${2}} = ${1};"]
  },
  "Composable async": {
    "prefix": "cpa",
    "body": ["export const ${1} = async () => {${2}};"]
  },
  "Composable": {
    "prefix": "cp",
    "body": ["export const ${1} = () => {${2}};"]
  },
  "Ref HTMLElement": {
    "prefix": "re",
    "body": ["const ${1} = ref<HTMLElement>();"]
  },
  "Component props": {
    "prefix": "dp",
    "body": ["type Props = {${1}};", "", "defineProps<Props>();"]
  },
  "Single type store": {
    "prefix": "sts",
    "body": [
      "import type { SingleResponse } from '../types/single-response.type';",
      "",
      "export const use${1}Store = async () => {",
      "  const ${2} = useState<SingleResponse>('${2}');",
      "",
      "  const get${1} = async () => {",
      "    const query = useQueryString({",
      "      populate: singleApiPopulate,",
      "    });",
      "",
      "    const { data } = await useApiHttpClient<SingleResponse>(",
      "      `/api/${2}?\\${query\\}`,",
      "    );",
      "",
      "    if (data.value) {",
      "      ${2}.value = data.value;",
      "    }",
      "  };",
      "",
      "  if (!${2}.value) {",
      "    await get${1}();",
      "  }",
      "",
      "  return ${2};",
      "};",
      ""
    ]
  },
  "Server api handler": {
    "prefix": "sa",
    "body": [
      "export default defineEventHandler(async (event) => {",
        "${1}",
      "});"
    ]
  },
  "Pinia Store": {
    "prefix": "ps",
    "body": [
      "/**",
      " * ${1}Store",
      " */",
      "export const use${1}Store = defineStore('${2}', () => {",
      "  /**",
      "   * State ðŸŒ´",
      "   */",
      "  ",
      "  ${3}",
      "  ",
      "  /**",
      "   * Getters ðŸŒµ",
      "   */",
      "",
      "  /**",
      "   * Actions ðŸš€",
      "   */",
      "",
      "  /**",
      "   * è¿”å›žå€¼",
      "   */",
      "  return {};",
      "});"
    ]
  },
  "Zod Schema": {
    "prefix": "zs",
    "body": [
      "import { z } from 'zod';",
      "",
      "/**",
      " * åˆ›å»º",
      " */",
      "export const create${1}DtoSchema = z.object({",
      "  ",
      "});",
      "",
      "/**",
      " * æ›´æ–°",
      " */",
      "export const update${1}DtoSchema = z.optional(create${1}DtoSchema)",
      "",
      "/**",
      " * å®žä½“",
      " */",
      "export const ${2}Schema = z.object({})",
      "",
      "/**",
      " * åˆ—è¡¨",
      " */",
      "export const ${3}Schema = z.array(${2}Schema)",
      "",
      "/**",
      " * ç±»åž‹",
      " */",
      "export type ${1} = z.infer<typeof ${2}Schema>;",
      "export type ${4} = z.infer<typeof ${3}Schema>;",
      "export type Create${1}Dto = z.infer<typeof create${1}DtoSchema>;",
      "export type Update${1}Dto = z.infer<typeof update${1}DtoSchema>;",
      "",
      "/**",
      " * ç©ºç™½",
      " */",
      "export const _${2}: ${1} = {",
      "",
      "}",
      "",
    ]
  }
}
